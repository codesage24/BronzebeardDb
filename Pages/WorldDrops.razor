@page "/world-drops"
@using System.Text.Json
@using System.Text.Json.Serialization

@inject IJSRuntime Js
@inject HttpClient Http

<PageTitle>World Drops</PageTitle>

<h1>World Drops</h1>

<div class="world-drops">
    <div class="pane wd-map">
        @if (!string.IsNullOrWhiteSpace(_selectedZoneId))
        {
            <span style="background: @GetMapUrl();" @onmousemove="OnMouseMoveMap" @ref="_imageRef">
                @foreach (var thing in GetItems() ?? [])
                {
                    <div class="pin" style="top: 0; left: 0;">
                        <img src="https://db.ascension.gg/static/images/Mapper/pin-yellow-new.png" alt="pin" />
                    </div>
                }
                
                <div class="map-name">@_zones[_selectedZoneId].Name</div>

                @if (_mousePosition.X != 0d || _mousePosition.Y != 0d)
                {
                    <div class="map-coordinates">(@_mousePosition.X.ToString("#0.0"), @_mousePosition.Y.ToString("#0.0"))</div>
                }
            </span>
        }
    </div>

    <div class="pane wd-table">
        <select @bind="_selectedZoneId">
            <option value="">-- Select a Zone --</option>

            @foreach (var (id, zone) in _zones ?? new Dictionary<string, Zone>())
            {
                <option value="@id">@zone.Name</option>
            }
        </select>

        @{
            var items = GetItems();

            if (items is not null && items.Length > 0)
            {
                <table class="table table-dark table-striped">
                    <thead>
                    <tr>
                        <th>Item</th>
                        <th>Source</th>
                        <th>Rarity</th>
                        <th>Type</th>
                        <th>Slot</th>
                        <th>Requires</th>
                        <th>Level</th>
                        <th>Cost</th>
                        <th>Zone</th>
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var item in items)
                    {
                        <tr>
                            <td>@item.Name</td>
                            <td>@item.Source</td>
                            <td>@item.Rarity</td>
                            <td>@item.Type</td>
                            <td>@(item.Slot ?? string.Empty)</td>
                            <td>@item.RequiresLevel</td>
                            <td>@(item.ItemLevel > 0 ? item.ItemLevel : string.Empty)</td>
                            <td>@item.Cost</td>
                            <td>@_zones[item.ZoneId].Name</td>
                        </tr>
                    }
                    </tbody>
                </table>
            }
        }
    </div>
</div>

@code {
    string _selectedZoneId = string.Empty;

    IDictionary<string, Zone> _zones;
    IDictionary<string, Item[]> _itemsByZone;

    ElementReference _imageRef;
    Coordinate _mousePosition = new Coordinate(0.0, 0.0);

    protected override async Task OnInitializedAsync()
    {
        var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true,
                Converters = { new JsonStringEnumConverter() }
            };

        var zones = await Http.GetFromJsonAsync<Zone[]>("content/zones.json", options);
        var items = await Http.GetFromJsonAsync<Item[]>("content/world-drops.json", options);

        _zones = zones.ToDictionary(x => x.Id, y => y);
        _itemsByZone = items.GroupBy(x => x.ZoneId).ToDictionary(group => group.Key, group => group.ToArray());
    }

    private Item[] GetItems()
    {
        if (_itemsByZone is null || string.IsNullOrWhiteSpace(_selectedZoneId))
        {
            return [];
        }

        var success = _itemsByZone.TryGetValue(_selectedZoneId, out var items);

        return success ? items : [];
    }

    private string GetMapUrl() => $"url(\"https://db.ascension.gg/static/images/wow/maps/enus/zoom/{_selectedZoneId}.jpg\")";

    private async Task OnMouseMoveMap(MouseEventArgs args)
    {
        var rect = await Js.InvokeAsync<ElementRect>("getElementRect", _imageRef);
        _mousePosition = new Coordinate(
            Math.Round(((args.ClientX - rect.X) / rect.Width) * 100, 1),
            Math.Round(((args.ClientY - rect.Y) / rect.Height) * 100, 1));
    }

    private void OnMouseLeaveMap()
    {
        _mousePosition = new Coordinate(0, 0);
    }

    public record Coordinate(double X, double Y);

    public record ElementRect(double X, double Y, double Width, double Height);
}
