@page "/world-drops"
@page "/world-drops/{ZoneName}/"

@using System.Text.Json
@using System.Text.Json.Serialization

@inject IJSRuntime Js
@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>World Drops</PageTitle>

<h1>World Drops</h1>

<div class="world-drops">
    <div class="pane wd-map">
        @if (!string.IsNullOrWhiteSpace(_selectedZoneId))
        {
            <img src="@MapUrl" style="display:none" @onload="@OnMapLoaded" />
            <span style="background: url(@MapUrl)" @onmousemove="OnMouseMoveMap" @onmouseleave="OnMouseLeaveMap" @ref="_mapRef">

                @foreach (var item in (_selectedMapLoaded ? _selectedZoneItems : []))
                {
                    <div class="pin" style="left: @(item.X)%; top: @(item.Y)%;" title="@($"{item.Name} ({item.X}, {item.Y})")">
                        <a href="javascript:;" style="cursor: default;"></a>
                    </div>
                }

                <div class="map-name">@(_zones[_selectedZoneId].Name)</div>

                @if (_mousePosition.X != default || _mousePosition.Y != default)
                {
                    <div class="map-coordinates">(@_mousePosition.X.ToString("#0.0"), @_mousePosition.Y.ToString("#0.0"))</div>
                }
            </span>
        }
    </div>

    <div class="pane wd-table">
        <select @onchange="OnChangeMap">
            <option value="">-- Select a Zone --</option>

            @foreach (var (id, zone) in (_zones ?? new Dictionary<string, Zone>()).Where(z => z.Key != "-1"))
            {
                <option value="@id">@zone.Name</option>
            }
        </select>

        @if (_selectedZoneItems.Any())
        {
            <table class="table table-dark table-striped">
                <thead>
                    <tr>
                        <th>Item</th>
                        <th>Source</th>
                        <th>Rarity</th>
                        <th>Type</th>
                        <th>Slot</th>
                        @* <th>Requires</th> *@
                        @* <th>Level</th> *@
                        @* <th>Cost</th> *@
                        @* <th>Zone</th> *@
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in _selectedZoneItems)
                    {
                        <tr>
                            <td>@item.Name</td>
                            <td>@item.Source</td>
                            <td style="color: @(item.GetColor())">@item.Rarity</td>
                            <td>@item.Type</td>
                            <td>@(item.Slot ?? string.Empty)</td>
                            @* <td>@item.RequiresLevel</td> *@
                            @* <td>@(item.ItemLevel > 0 ? item.ItemLevel : string.Empty)</td> *@
                            @* <td>@item.Cost</td> *@
                            @* <td>@_zones[item.ZoneId].Name</td> *@
                        </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@code {
    bool _selectedMapLoaded = false;
    Item[] _selectedZoneItems = [];
    string _selectedZoneId = string.Empty;

    IDictionary<string, Zone> _zones;
    IDictionary<string, Item[]> _itemsByZone;

    ElementRect _mapRect;
    ElementReference _mapRef;
    Coordinate _mousePosition = new();

    [Parameter] public string ZoneName { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var options = new JsonSerializerOptions
        {
            PropertyNameCaseInsensitive = true,
            Converters = { new JsonStringEnumConverter() }
        };

        var zones = await Http.GetFromJsonAsync<Zone[]>("content/zones.json", options);
        var items = await Http.GetFromJsonAsync<Item[]>("content/world-drops.json", options);

        _zones = zones.ToDictionary(x => x.Id, y => y);
        _itemsByZone = items.GroupBy(x => x.ZoneId).ToDictionary(group => group.Key, group => group.ToArray());
    }

    protected override void OnParametersSet()
    {
        if (string.IsNullOrWhiteSpace(ZoneName))
        {
            const string azerothId = "-1";

            _selectedZoneId = azerothId;

            _selectedZoneItems = [];

            return;
        }

        var name = ZoneName.Replace('_', ' ');

        var zone = _zones.Values.FirstOrDefault(zone => zone.Name == name);

        if (zone is null || string.IsNullOrWhiteSpace(zone.Name))
        {
            return;
        }

        _selectedZoneId = zone.Id;

        _selectedZoneItems = GetItems();
    }

    private void OnChangeMap(ChangeEventArgs args)
    {
        var id = args.Value.ToString();

        var zone = _zones.First(zone => zone.Key == id).Value;

        var name = zone.Name.Replace(' ', '_');

        Navigation.NavigateTo($"/world-drops/{name}/");
    }

    private async Task OnMapLoaded()
    {
        _mapRect ??= await Js.InvokeAsync<ElementRect>("getElementRect", _mapRef);

        _selectedMapLoaded = true;
    }

    private Item[] GetItems()
    {
        if (_itemsByZone is null || string.IsNullOrWhiteSpace(_selectedZoneId))
        {
            return [];
        }

        var success = _itemsByZone.TryGetValue(_selectedZoneId, out var items);

        return success ? items : [];
    }

    private void OnMouseMoveMap(MouseEventArgs args)
    {
        if (_selectedMapLoaded)
        {
            var x = Math.Round(((args.ClientX - _mapRect.X) / _mapRect.Width) * 100, 1);
            var y = Math.Round(((args.ClientY - _mapRect.Y) / _mapRect.Height) * 100, 1);

            _mousePosition = new Coordinate(x, y);
        }
        else
        {
            _mousePosition = new();
        }
    }

    private void OnMouseLeaveMap()
    {
        _mousePosition = new();
    }

    private string MapUrl => $"https://db.ascension.gg/static/images/wow/maps/enus/zoom/{_selectedZoneId}.jpg";

    public record Coordinate(double X = default, double Y = default);

    public record ElementRect(double X, double Y, double Width, double Height);
}
