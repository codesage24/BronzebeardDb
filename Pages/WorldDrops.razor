@page "/world-drops"
@page "/world-drops/{ZoneName}/"

@using System.Text.Json
@using System.Text.Json.Serialization

@inject IJSRuntime Js
@inject HttpClient Http
@inject NavigationManager Navigation

<PageTitle>World Drops</PageTitle>

<div class="world-drops">
    <div class="pane wd-map">
        @if (!string.IsNullOrWhiteSpace(_selectedZoneId))
        {
            <img src="@MapUrl" style="display:none" @onload="@OnMapLoaded" alt="map" />
            <span style="background: url(@MapUrl)" @onmousemove="OnMouseMoveMap" @onmouseleave="@(_ => _mousePosition = new())" @ref="_mapRef">

                @foreach (var item in (_selectedMapLoaded ? _selectedZoneItems : []))
                {
                    <div id="@item.Id" class="pin" style="left: @(item.X)%; top: @(item.Y)%;" title="@item.Title">
                        <a href="javascript:;" style="cursor: default;"></a>
                    </div>
                }

                <div class="map-name">@(_zones[_selectedZoneId].Name)</div>

                @if (_mousePosition.Over)
                {
                    <div class="map-coordinates">(@_mousePosition.X.ToString("#0.0"), @_mousePosition.Y.ToString("#0.0"))</div>
                }
            </span>
        }
    </div>

    <div class="pane container wd-table">
        <div class="row align-items-center justify-content-center">
            <div class="col-sm-auto">
                <select @onchange="OnChangeMap">
                    <option value="">-- Select a Zone --</option>

                    @foreach (var (id, zone) in (_zones ?? new Dictionary<string, Zone>()).Where(z => z.Key != "-1"))
                    {
                        <option value="@id">@zone.Name</option>
                    }
                </select>
            </div>
            
            <div class="col-md-auto">
                <label>@_selectedZoneItems.Count() items found.</label>
            </div>
            
            <div class="col-sm-auto">
                <button class="btn btn-dark" disabled="@true">Submit Drop</button>
            </div>
        </div>

        @if (_selectedZoneItems.Any())
        {
            <div class="row">
                <table class="table table-dark table-hover align-items-center">
                    <thead>
                    <tr>
                        <th style="width: 44px;"></th>
                        <th>Name</th>
                        <th>Source</th>
                        <th>Type</th>
                        @* <th>Requires</th> *@
                        @* <th>Level</th> *@
                        @* <th>Cost</th> *@
                    </tr>
                    </thead>
                    <tbody>
                    @foreach (var item in _selectedZoneItems)
                    {
                        <tr>
                            <td>
                                <div class="icon">
                                    <ins style="background-image: url(@($"https://db.ascension.gg/static/images/wow/icons/medium/{(item.icon ?? "inv_misc_questionmark")}.jpg"))"></ins>
                                </div>
                            </td>
                            <td style="color: @(item.GetColor())"><a href="@($"https://db.ascension.gg/?item={item.Id}")" target="_blank">@item.Name</a></td>
                            <td>@item.Source</td>
                            <td>@item.Type</td>
                            @* <td>@item.RequiresLevel</td> *@
                            @* <td>@(item.ItemLevel > 0 ? item.ItemLevel : string.Empty)</td> *@
                            @* <td>@item.Cost</td> *@
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        }
    </div>
</div>

@code {
    bool _selectedMapLoaded;
    Item[] _selectedZoneItems = [];
    string _selectedZoneId = string.Empty;

    IDictionary<string, Zone> _zones;

    ElementRect _mapRect;
    ElementReference _mapRef;
    Coordinate _mousePosition = new();

    [Parameter] public string ZoneName { get; set; }

    readonly JsonSerializerOptions _jsonOptions = new()
    {
        PropertyNameCaseInsensitive = true,
        Converters = { new JsonStringEnumConverter() }
    };

    protected override async Task OnInitializedAsync()
    {
        var zones = await Http.GetFromJsonAsync<Zone[]>("content/zones.json", _jsonOptions);

        _zones = zones.ToDictionary(x => x.Id, y => y);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (string.IsNullOrWhiteSpace(ZoneName))
        {
            const string defaultMapId = "-1"; // map of Azeroth

            _selectedZoneId = defaultMapId;

            _selectedZoneItems = [];

            return;
        }

        var name = ZoneName.Replace('_', ' ');

        var zone = _zones.Values.FirstOrDefault(zone => zone.Name == name);

        if (zone is null || string.IsNullOrWhiteSpace(zone.Name))
        {
            return;
        }

        _selectedZoneId = zone.Id;

        _selectedZoneItems = await GetItems();
    }

    private void OnChangeMap(ChangeEventArgs args)
    {
        var id = args?.Value?.ToString() ?? string.Empty;

        if (string.IsNullOrWhiteSpace(id))
        {
            return;
        }

        var zone = _zones.First(zone => zone.Key == id).Value;

        var name = zone.Name.Replace(' ', '_');

        Navigation.NavigateTo($"/world-drops/{name}/");
    }

    private async Task OnMapLoaded()
    {
        _mapRect ??= await Js.InvokeAsync<ElementRect>("getElementRect", _mapRef);

        await Task.Delay(1000);

        _selectedMapLoaded = true;
    }

    private async Task<Item[]> GetItems()
    {
        if (string.IsNullOrWhiteSpace(_selectedZoneId))
        {
            return [];
        }

        var response = await Http.GetAsync($"content/world-drops/wd-{_selectedZoneId}.json");

        if (!response.IsSuccessStatusCode)
        {
            return [];
        }

        var items = await response.Content.ReadFromJsonAsync<Item[]>(_jsonOptions);

        return items;
    }

    private void OnMouseMoveMap(MouseEventArgs args)
    {
        if (_selectedMapLoaded)
        {
            var x = Math.Round(((args.ClientX - _mapRect.X) / _mapRect.Width) * 100, 1);
            var y = Math.Round(((args.ClientY - _mapRect.Y) / _mapRect.Height) * 100, 1);

            _mousePosition = new Coordinate(true, x, y);
        }
        else
        {
            _mousePosition = new();
        }
    }

    private string MapUrl => $"https://db.ascension.gg/static/images/wow/maps/enus/zoom/{_selectedZoneId}.jpg";

    public record Coordinate(bool Over = false, double X = default, double Y = default);

    public record ElementRect(double X, double Y, double Width, double Height);
}
